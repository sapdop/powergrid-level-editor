{"version":3,"sources":["CustomDiagram/task/component.js","CustomDiagram/task/icon.js","CustomDiagram/event/component.js","CustomDiagram/event/icon.js","CustomDiagram/config-example.js","CustomDiagram/index.js","App.js","registerServiceWorker.js","index.js"],"names":["TaskStyle","style","div","_templateObject","props","isEditing","width","height","Name","span","_templateObject2","EditName","textarea","_templateObject3","Task","react_default","a","createElement","model","value","name","onChange","refreshName","onKeyDown","handleKeyPress","innerRef","handleRef","display","onDoubleClick","toggleEdit","TaskComponent","state","_this","Object","assertThisInitialized","setTimeout","focus","setState","ev","currentTarget","key","setName","id","this","component_Task","assign","React","PureComponent","icon","path","d","size","EventStyle","component_templateObject","component_templateObject2","component_templateObject3","Event","component_EditName","component_Name","EventComponent","component_Event","config","entityTypes","gridSize","customEntities","component","taskIcon","GateIdMap","AND","OR","NONE","XOR","NOR","NAND","NOT","NONE_ON","cellList","flowChartData","CustomDiagram","onHitExport","forEach","element","push","JSON","stringify","gateType","links","linksTo","getLinkIndices","clearBoard","window","location","reload","diagramStore","dispatch","setConfig","diagramOn","entityState","lib","text","onClick","className","es","linkArray","contentArray","indices","findIndex","item","target","App","src_CustomDiagram","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e0f84cc1.chunk.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport style from 'styled-components';\n\nimport type { DiagComponentProps } from 'react-flow-diagram';\n\n/*\n * Presentational\n * ==================================== */\n\nconst TaskStyle = style.div`\n  background-color: #fff;\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: ${props => (props.isEditing ? 'stretch' : 'center')};\n  width: ${props => props.width}px;\n  height: ${props => props.height}px;\n  border-radius: .5rem;\n  border: 2px solid #888;\n`;\n\nconst Name = style.span`\n  flex: 1 0;\n  padding: .5em;\n  font-size: .8rem;\n`;\n\nconst EditName = style.textarea`\n  padding: .5em;\n  font-size: .8rem;\n  text-align: center;\n  resize: none;\n  border: none;\n  border-radius: .5rem;\n`;\n\nexport type TaskProps = DiagComponentProps & {\n  name: string,\n  isEditing: boolean,\n  toggleEdit: boolean => void,\n  refreshName: (SyntheticEvent<HTMLTextAreaElement>) => void,\n  handleKeyPress: (SyntheticKeyboardEvent<HTMLTextAreaElement>) => void,\n  handleRef: HTMLTextAreaElement => void,\n};\nconst Task = (props: TaskProps) => (\n  <TaskStyle\n    width={props.model.width}\n    height={props.model.height}\n    isEditing={props.isEditing}\n  >\n    <EditName\n      value={props.name}\n      onChange={props.refreshName}\n      onKeyDown={props.handleKeyPress}\n      innerRef={textarea => props.handleRef(textarea)}\n      style={{ display: props.isEditing ? 'block' : 'none' }}\n    />\n    <Name\n      onDoubleClick={() => props.toggleEdit(true)}\n      style={{ display: !props.isEditing ? 'block' : 'none' }}\n    >\n      {props.model.name}\n    </Name>\n  </TaskStyle>\n);\n\n/*\n * Container\n * ==================================== */\n\ntype TaskComponentProps = DiagComponentProps;\ntype TaskComponentState = {\n  isEditing: boolean,\n  name: string,\n};\nclass TaskComponent extends React.PureComponent<\n  TaskComponentProps,\n  TaskComponentState\n> {\n  textarea: ?HTMLTextAreaElement;\n\n  state = {\n    isEditing: false,\n    name: this.props.model.name,\n  };\n\n  componentWillUnmount() {\n    this.textarea = null;\n  }\n\n  handleRef = (textarea: HTMLTextAreaElement) => {\n    if (!this.textarea) {\n      this.textarea = textarea;\n    }\n  };\n\n  toggleEdit = (isEditing: boolean) => {\n    const { textarea } = this;\n    if (isEditing && textarea) {\n      setTimeout(() => textarea.focus(), 16 * 4);\n    }\n    this.setState({ isEditing });\n  };\n\n  refreshName = (ev: SyntheticEvent<HTMLTextAreaElement>) => {\n    this.setState({ name: ev.currentTarget.value });\n  };\n\n  handleKeyPress = (ev: SyntheticKeyboardEvent<HTMLTextAreaElement>) => {\n    switch (ev.key) {\n      case 'Enter':\n        this.toggleEdit(false);\n        this.props.setName({ id: this.props.model.id, name: this.state.name });\n        break;\n      case 'Escape':\n        this.toggleEdit(false);\n        this.setState({ name: this.props.model.name });\n        break;\n      // no default\n    }\n  };\n\n  render() {\n    return (\n      <Task\n        {...this.props}\n        isEditing={this.state.isEditing}\n        name={this.state.name}\n        toggleEdit={this.toggleEdit}\n        refreshName={this.refreshName}\n        handleKeyPress={this.handleKeyPress}\n        handleRef={this.handleRef}\n      />\n    );\n  }\n}\n\nexport default TaskComponent;\n","// @flow\n\nimport React from 'react';\n\nconst icon = {\n  path: (\n    <path d=\"M14 0H2C1 0 0 1 0 2v12c0 1 1 2 2 2h12c1 0 2-1 2-2V2c0-1-1-2-2-2z\" />\n  ),\n  size: 16,\n};\n\nexport default icon;\n","// @flow\n\nimport React from 'react';\nimport style from 'styled-components';\n\nimport type { DiagComponentProps } from 'react-flow-diagram';\n\n/*\n * Presentational\n * ==================================== */\n\nconst EventStyle = style.div`\n  background-color: #fff;\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  align-items: center;\n  width: ${props => props.width}px;\n  height: ${props => props.height}px;\n  border-radius: 77rem;\n  border: 2px solid #888;\n  justify-content: center;\n  font-size: .5rem;\n`;\n\nconst Name = style.span`\n  position: absolute;\n  top: 100%;\n  width: 200%;\n  padding: .5em;\n  font-size: .8rem;\n`;\n\nconst EditName = style.textarea`\n  position: absolute;\n  top: 100%;\n  width: 200%;\n  padding: .5em;\n  border: none;\n  font-size: .8rem;\n  text-align: center;\n  border-radius: .1rem;\n  resize: none;\n  z-index: 10;\n  background-color: rgba(255, 255, 255, 0.8);\n`;\n\nexport type EventProps = DiagComponentProps & {\n  name: string,\n  isEditing: boolean,\n  toggleEdit: boolean => void,\n  refreshName: (SyntheticEvent<HTMLTextAreaElement>) => void,\n  handleKeyPress: (SyntheticKeyboardEvent<HTMLTextAreaElement>) => void,\n  handleRef: HTMLTextAreaElement => void,\n};\nconst Event = (props: EventProps) => (\n  <EventStyle width={props.model.width} height={props.model.height}>\n    <EditName\n      value={props.name}\n      onChange={props.refreshName}\n      onKeyDown={props.handleKeyPress}\n      innerRef={textarea => props.handleRef(textarea)}\n      style={{ display: props.isEditing ? 'block' : 'none' }}\n    />\n    <Name\n      onDoubleClick={() => props.toggleEdit(true)}\n      style={{ display: !props.isEditing ? 'block' : 'none' }}\n    >\n      {props.model.name}\n    </Name>\n  </EventStyle>\n);\n\n/*\n * Container\n * ==================================== */\n\ntype EventComponentProps = DiagComponentProps;\ntype EventComponentState = {\n  isEditing: boolean,\n  name: string,\n};\nclass EventComponent extends React.PureComponent<\n  EventComponentProps,\n  EventComponentState\n> {\n  textarea: ?HTMLTextAreaElement;\n\n  state = {\n    isEditing: false,\n    name: this.props.model.name,\n  };\n\n  componentWillUnmount() {\n    this.textarea = null;\n  }\n\n  handleRef = (textarea: HTMLTextAreaElement) => {\n    if (!this.textarea) {\n      this.textarea = textarea;\n    }\n  };\n\n  toggleEdit = (isEditing: boolean) => {\n    const { textarea } = this;\n    if (isEditing && textarea) {\n      setTimeout(() => textarea.focus(), 16 * 4);\n    }\n    this.setState({ isEditing });\n  };\n\n  refreshName = (ev: SyntheticEvent<HTMLTextAreaElement>) => {\n    this.setState({ name: ev.currentTarget.value });\n  };\n\n  handleKeyPress = (ev: SyntheticKeyboardEvent<HTMLTextAreaElement>) => {\n    switch (ev.key) {\n      case 'Enter':\n        this.toggleEdit(false);\n        this.props.setName({ id: this.props.model.id, name: this.state.name });\n        break;\n      case 'Escape':\n        this.toggleEdit(false);\n        this.setState({ name: this.props.model.name });\n        break;\n      // no default\n    }\n  };\n\n  render() {\n    return (\n      <Event\n        {...this.props}\n        isEditing={this.state.isEditing}\n        name={this.state.name}\n        toggleEdit={this.toggleEdit}\n        refreshName={this.refreshName}\n        handleKeyPress={this.handleKeyPress}\n        handleRef={this.handleRef}\n      />\n    );\n  }\n}\n\nexport default EventComponent;\n","// @flow\n\nimport React from 'react';\n\nconst icon = {\n  path: <path d=\"M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8z\" />,\n  size: 16,\n};\n\nexport default icon;\n","import Task from './task/component';\nimport taskIcon from './task/icon';\nimport Event from './event/component';\nimport eventIcon from './event/icon';\n\nconst config = {\n  entityTypes: {\n    Task: {\n      width: 125,\n      height: 75,\n    },\n    Event: {\n      width: 50,\n      height: 50,\n    },\n  },\n  gridSize: 25,\n};\n\nconst customEntities = {\n  Task: {\n    component: Task,\n    icon: taskIcon,\n  },\n  Event: {\n    component: Event,\n    icon: eventIcon,\n  },\n};\n\nexport { config, customEntities };\n","import React from \"react\";\nimport {\n  Diagram,\n  store as diagramStore,\n  setEntities,\n  setConfig,\n  diagramOn\n} from \"react-flow-diagram\";\n//import model from \"./model-example\";\nimport { config, customEntities } from \"./config-example\";\nimport { link } from \"fs\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nvar GateIdMap = [];\nGateIdMap.AND = 0;\nGateIdMap.OR = 1;\nGateIdMap.NONE = 2;\nGateIdMap.XOR = 3;\nGateIdMap.NOR = 4;\nGateIdMap.NAND = 5;\nGateIdMap.NOT = 6;\nGateIdMap.NONE_ON = 7;\n\nvar cellList = [];\n\nvar flowChartData = [];\n\nclass CustomDiagram extends React.PureComponent {\n  componentDidMount() {}\n\n  componentWillMount() {\n    diagramStore.dispatch(setConfig(config));\n    //diagramStore.dispatch(setEntities(model));\n\n    diagramOn(\n      \"anyChange\",\n      entityState =>\n        // You can get the model back\n        // after modifying the UI representation\n        (flowChartData = entityState) //this.onHitExport(entityState) //console.log(entityState)\n    );\n  }\n  render() {\n    return (\n      <div>\n        <CopyToClipboard text={cellList}>\n          <button onClick={this.onHitExport}>EXPORT</button>\n        </CopyToClipboard>\n        <button onClick={this.clearBoard}>CLEAR</button>\n        <div className=\"main\">\n          <Diagram customEntities={customEntities} />\n        </div>\n      </div>\n    );\n  }\n\n  onHitExport = () => {\n    flowChartData.forEach(element => {\n      cellList.push(\n        JSON.stringify({\n          gateType: GateIdMap[element.name],\n          links: element.linksTo\n            ? this.getLinkIndices(element.linksTo, flowChartData)\n            : []\n        })\n      );\n    });\n\n    //console.log(cellList);\n\n    // use the below line to reset the canvas\n    //diagramStore.dispatch(setEntities([]));\n  };\n\n  clearBoard = () => {\n    window.location.reload();\n    // diagramStore.dispatch(setEntities([]));\n    // cellList = [];\n    // flowChartData = [];\n  };\n\n  getLinkIndices(linkArray, contentArray) {\n    var indices = [];\n    linkArray.forEach(element => {\n      indices.push(contentArray.findIndex(item => item.id === element.target));\n    });\n    return indices;\n  }\n}\n\nexport default CustomDiagram;\n","import React, { Component } from \"react\";\nimport CustomDiagram from \"./CustomDiagram\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Power-Grid Level Editor</h1>\n        </header>\n        <main className=\"main\">\n          <CustomDiagram />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}